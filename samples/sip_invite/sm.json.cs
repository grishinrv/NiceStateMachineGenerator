// generated by NiceStateMachineGenerator v1.0.0.0

using System;

namespace Generated
{
    public partial class StateMachine: IDisposable
    {
        
        public delegate void TimerFiredCallback(ITimer timer);
        
        public interface ITimer: IDisposable
        {
            void StartOrReset();
            void Stop();
        }
        
        public interface ITimerFactory
        {
            ITimer CreateTimer(string timerName, double timerDelaySeconds, TimerFiredCallback callback);
        }
        
        
        public enum States
        {
            Calling_Start,
            Calling_Retransmit,
            Proceeding,
            Completed,
            Terminated,
        }
        
        public event Action OnStateEnter__Calling_Start;
        public event Action OnStateEnter__Calling_Retransmit;
        public event Action OnStateEnter__Terminated;
        
        public event Action<t_packet> OnEventTraverse__Calling_Start__SIP_1xx__Proceeding; 
        public event Action<t_packet> OnEventTraverse__Calling_Start__SIP_2xx__Terminated; 
        public event Action<t_packet> OnEventTraverse__Calling_Start__SIP_300_699__Completed; 
        public event Action OnEventTraverse__Calling_Start__TransportError__Terminated;
        public event Action<t_packet> OnEventTraverse__Calling_Retransmit__SIP_1xx__Proceeding; 
        public event Action<t_packet> OnEventTraverse__Calling_Retransmit__SIP_2xx__Terminated; 
        public event Action<t_packet> OnEventTraverse__Calling_Retransmit__SIP_300_699__Completed; 
        public event Action OnEventTraverse__Calling_Retransmit__TransportError__Terminated;
        public event Action OnTimerTraverse__Calling_Retransmit__Timer_B__Terminated;
        public event Action<t_packet> OnEventTraverse__Proceeding__SIP_1xx__Proceeding; 
        public event Action<t_packet> OnEventTraverse__Proceeding__SIP_2xx__Terminated; 
        public event Action<t_packet> OnEventTraverse__Proceeding__SIP_300_699__Completed; 
        public event Action OnEventTraverse__Proceeding__TransportError__Terminated;
        public event Action<t_packet> OnEventTraverse__Completed__SIP_300_699__Completed; 
        public event Action OnEventTraverse__Completed__TransportError__Terminated;
        
        private bool m_isDisposed = false;
        private readonly ITimer Timer_A;
        private readonly ITimer Timer_A2;
        private readonly ITimer Timer_B;
        private readonly ITimer Timer_D;
        
        public States CurrentState { get; private set; } = States.Calling_Start;
        
        public StateMachine(ITimerFactory timerFactory)
        {
            this.Timer_A = timerFactory.CreateTimer("Timer_A", 0.5, this.OnTimer);
            this.Timer_A.Stop();
            this.Timer_A2 = timerFactory.CreateTimer("Timer_A2", 2, this.OnTimer);
            this.Timer_A2.Stop();
            this.Timer_B = timerFactory.CreateTimer("Timer_B", 32, this.OnTimer);
            this.Timer_B.Stop();
            this.Timer_D = timerFactory.CreateTimer("Timer_D", 32, this.OnTimer);
            this.Timer_D.Stop();
        }
        
        public void Dispose()
        {
            if (!this.m_isDisposed)
            {
                this.Timer_A.Dispose();
                this.Timer_A2.Dispose();
                this.Timer_B.Dispose();
                this.Timer_D.Dispose();
                this.m_isDisposed = true;
            }
        }
        
        private void CheckNotDisposed()
        {
            if (this.m_isDisposed)
            {
                throw new ObjectDisposedException("StateMachine");
            }
        }
        
        public void Start()
        {
            CheckNotDisposed();
            this.CurrentState = States.Calling_Start;
            this.Timer_A.StartOrReset();
            this.Timer_B.StartOrReset();
            OnStateEnter__Calling_Start?.Invoke();
        }
        
        private void OnTimer(ITimer timer)
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.Calling_Start:
                if (timer == this.Timer_A)
                {
                    SetState(States.Calling_Retransmit);
                }
                else if (timer == this.Timer_B)
                {
                }
                else 
                {
                    throw new Exception("Unexpected timer finish in state Calling_Start. Timer was " + timer);
                }
                break;
                
            case States.Calling_Retransmit:
                if (timer == this.Timer_A2)
                {
                    SetState(States.Calling_Retransmit);
                }
                else if (timer == this.Timer_B)
                {
                    OnTimerTraverse__Calling_Retransmit__Timer_B__Terminated?.Invoke();
                    SetState(States.Terminated);
                }
                else 
                {
                    throw new Exception("Unexpected timer finish in state Calling_Retransmit. Timer was " + timer);
                }
                break;
                
            case States.Completed:
                if (timer == this.Timer_D)
                {
                    SetState(States.Terminated);
                }
                else 
                {
                    throw new Exception("Unexpected timer finish in state Completed. Timer was " + timer);
                }
                break;
                
            default:
                throw new Exception("No timer events expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__SIP_1xx(t_packet packet)
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.Calling_Start:
                OnEventTraverse__Calling_Start__SIP_1xx__Proceeding?.Invoke(packet);
                SetState(States.Proceeding);
                break;
                
            case States.Calling_Retransmit:
                OnEventTraverse__Calling_Retransmit__SIP_1xx__Proceeding?.Invoke(packet);
                SetState(States.Proceeding);
                break;
                
            case States.Proceeding:
                OnEventTraverse__Proceeding__SIP_1xx__Proceeding?.Invoke(packet);
                SetState(States.Proceeding);
                break;
                
            case States.Completed:
                break;
                
            default:
                throw new Exception("Event SIP_1xx is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__SIP_2xx(t_packet packet)
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.Calling_Start:
                OnEventTraverse__Calling_Start__SIP_2xx__Terminated?.Invoke(packet);
                SetState(States.Terminated);
                break;
                
            case States.Calling_Retransmit:
                OnEventTraverse__Calling_Retransmit__SIP_2xx__Terminated?.Invoke(packet);
                SetState(States.Terminated);
                break;
                
            case States.Proceeding:
                OnEventTraverse__Proceeding__SIP_2xx__Terminated?.Invoke(packet);
                SetState(States.Terminated);
                break;
                
            case States.Completed:
                break;
                
            default:
                throw new Exception("Event SIP_2xx is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__SIP_300_699(t_packet packet)
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.Calling_Start:
                OnEventTraverse__Calling_Start__SIP_300_699__Completed?.Invoke(packet);
                SetState(States.Completed);
                break;
                
            case States.Calling_Retransmit:
                OnEventTraverse__Calling_Retransmit__SIP_300_699__Completed?.Invoke(packet);
                SetState(States.Completed);
                break;
                
            case States.Proceeding:
                OnEventTraverse__Proceeding__SIP_300_699__Completed?.Invoke(packet);
                SetState(States.Completed);
                break;
                
            case States.Completed:
                OnEventTraverse__Completed__SIP_300_699__Completed?.Invoke(packet);
                SetState(States.Completed);
                break;
                
            default:
                throw new Exception("Event SIP_300_699 is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__TransportError()
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.Calling_Start:
                OnEventTraverse__Calling_Start__TransportError__Terminated?.Invoke();
                SetState(States.Terminated);
                break;
                
            case States.Calling_Retransmit:
                OnEventTraverse__Calling_Retransmit__TransportError__Terminated?.Invoke();
                SetState(States.Terminated);
                break;
                
            case States.Proceeding:
                OnEventTraverse__Proceeding__TransportError__Terminated?.Invoke();
                SetState(States.Terminated);
                break;
                
            case States.Completed:
                OnEventTraverse__Completed__TransportError__Terminated?.Invoke();
                SetState(States.Terminated);
                break;
                
            default:
                throw new Exception("Event TransportError is not expected in state " + this.CurrentState);
            }
        }
        
        private void SetState(States state)
        {
            CheckNotDisposed();
            switch (state)
            {
            case States.Calling_Start:
                this.CurrentState = States.Calling_Start;
                this.Timer_A.StartOrReset();
                this.Timer_B.StartOrReset();
                OnStateEnter__Calling_Start?.Invoke();
                break;
                
            case States.Calling_Retransmit:
                this.CurrentState = States.Calling_Retransmit;
                this.Timer_A.Stop();
                this.Timer_A2.StartOrReset();
                OnStateEnter__Calling_Retransmit?.Invoke();
                break;
                
            case States.Proceeding:
                this.CurrentState = States.Proceeding;
                this.Timer_A.Stop();
                this.Timer_A2.Stop();
                this.Timer_B.Stop();
                break;
                
            case States.Completed:
                this.CurrentState = States.Completed;
                this.Timer_A.Stop();
                this.Timer_A2.Stop();
                this.Timer_B.Stop();
                this.Timer_D.StartOrReset();
                break;
                
            case States.Terminated:
                this.CurrentState = States.Terminated;
                OnStateEnter__Terminated?.Invoke();
                break;
                
            default:
                throw new Exception("Unexpected state " + state);
            }
        }
        
    }
}
