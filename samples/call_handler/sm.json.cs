// generated by NiceStateMachineGenerator v1.0.0.0

using System;

namespace Generated
{
    public partial class StateMachine: IDisposable
    {
        
        public delegate void TimerFiredCallback(ITimer timer);
        
        public interface ITimer: IDisposable
        {
            void StartOrReset();
            void Stop();
        }
        
        public interface ITimerFactory
        {
            ITimer CreateTimer(string timerName, double timerDelaySeconds, TimerFiredCallback callback);
        }
        
        
        public enum States
        {
            in_call,
            session_termination_process,
            awaiting_asr_fully_finalized,
            asr_fully_finalized,
            early_termination,
            termination,
        }
        
        public event Action OnStateEnter__session_termination_process;
        public event Action OnStateEnter__awaiting_asr_fully_finalized;
        public event Action OnStateEnter__asr_fully_finalized;
        public event Action OnStateEnter__early_termination;
        public event Action OnStateEnter__termination;
        
        
        private bool m_isDisposed = false;
        private readonly ITimer asr_timeout;
        
        public States CurrentState { get; private set; } = States.in_call;
        
        public StateMachine(ITimerFactory timerFactory)
        {
            this.asr_timeout = timerFactory.CreateTimer("asr_timeout", 10, this.OnTimer);
            this.asr_timeout.Stop();
        }
        
        public void Dispose()
        {
            if (!this.m_isDisposed)
            {
                this.asr_timeout.Dispose();
                this.m_isDisposed = true;
            }
        }
        
        private void CheckNotDisposed()
        {
            if (this.m_isDisposed)
            {
                throw new ObjectDisposedException("StateMachine");
            }
        }
        
        public void Start()
        {
            CheckNotDisposed();
            this.CurrentState = States.in_call;
        }
        
        private void OnTimer(ITimer timer)
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.awaiting_asr_fully_finalized:
                if (timer == this.asr_timeout)
                {
                    SetState(States.asr_fully_finalized);
                }
                else 
                {
                    throw new Exception("Unexpected timer finish in state awaiting_asr_fully_finalized. Timer was " + timer);
                }
                break;
                
            default:
                throw new Exception("No timer events expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__telephony_session_terminated()
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.in_call:
                SetState(States.awaiting_asr_fully_finalized);
                break;
                
            case States.session_termination_process:
                SetState(States.awaiting_asr_fully_finalized);
                break;
                
            default:
                throw new Exception("Event telephony_session_terminated is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__asr_fully_finalized()
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.awaiting_asr_fully_finalized:
                SetState(States.asr_fully_finalized);
                break;
                
            case States.asr_fully_finalized:
                break;
                
            default:
                throw new Exception("Event asr_fully_finalized is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__script_final_state_reached()
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.in_call:
                SetState(States.early_termination);
                break;
                
            case States.session_termination_process:
                SetState(States.early_termination);
                break;
                
            case States.awaiting_asr_fully_finalized:
                SetState(States.early_termination);
                break;
                
            case States.asr_fully_finalized:
                SetState(States.termination);
                break;
                
            default:
                throw new Exception("Event script_final_state_reached is not expected in state " + this.CurrentState);
            }
        }
        
        public void ProcessEvent__session_termination_request()
        {
            CheckNotDisposed();
            switch (this.CurrentState)
            {
            case States.in_call:
                SetState(States.session_termination_process);
                break;
                
            case States.session_termination_process:
                break;
                
            case States.awaiting_asr_fully_finalized:
                break;
                
            case States.asr_fully_finalized:
                break;
                
            default:
                throw new Exception("Event session_termination_request is not expected in state " + this.CurrentState);
            }
        }
        
        private void SetState(States state)
        {
            CheckNotDisposed();
            switch (state)
            {
            case States.in_call:
                this.CurrentState = States.in_call;
                break;
                
            case States.session_termination_process:
                this.CurrentState = States.session_termination_process;
                OnStateEnter__session_termination_process?.Invoke();
                break;
                
            case States.awaiting_asr_fully_finalized:
                this.CurrentState = States.awaiting_asr_fully_finalized;
                this.asr_timeout.StartOrReset();
                OnStateEnter__awaiting_asr_fully_finalized?.Invoke();
                break;
                
            case States.asr_fully_finalized:
                this.CurrentState = States.asr_fully_finalized;
                this.asr_timeout.Stop();
                OnStateEnter__asr_fully_finalized?.Invoke();
                break;
                
            case States.early_termination:
                this.CurrentState = States.early_termination;
                OnStateEnter__early_termination?.Invoke();
                SetState(States.termination);
                break;
                
            case States.termination:
                this.CurrentState = States.termination;
                OnStateEnter__termination?.Invoke();
                break;
                
            default:
                throw new Exception("Unexpected state " + state);
            }
        }
        
    }
}
